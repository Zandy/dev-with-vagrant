# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 2.0.0"

def os_family
  case RUBY_PLATFORM
    when /ix/i, /ux/i, /gnu/i,
         /sysv/i, /solaris/i,
         /sunos/i, /bsd/i
      "unix"
    when /darwin/i
      "osx"
    when /win/i, /ming/i
      "windows"
    else
      "other"
  end
end

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  Encoding.default_external = 'UTF-8'

  config.vbguest.auto_update = false

  ###config.ssh.username = "ubuntu"
  ###config.ssh.password = "ubuntu"
  ####config.ssh.username = "vagrant"
  ####config.ssh.password = "vagrant"
  ###config.ssh.insert_key = false

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  ## config.vm.box = "base"

  config.vm.box = "ubuntu-2004-64"
  if os_family == "windows"
    config.vm.box_url = "D:"
  else
    config.vm.box_url = ""
  end
  ###config.vm.box = "ubuntu/xenial64"
  ###config.vm.box = "ubuntu-2004-64"
  ###config.vm.box_url += "/var/www/software/vagrantbox/xenial-server-cloudimg-amd64-vagrant.box"
  config.vm.box_url += "/var/www/vagrant/ubuntu-20.04-server-cloudimg-amd64-vagrant.box"

  # 注意：由于最开始box只有40G，不够用时可扩容，这里扩至50G，但须安装一个插件：vagrant plugin install vagrant-disksize
  # @see https://github.com/sprotheroe/vagrant-disksize
  ###config.disksize.size = '50GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  ###config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh", disabled: true
  config.vm.network "forwarded_port", guest: 22, host: 2203, auto_correct: true
  config.vm.network "forwarded_port", guest: 80, host: 8103, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 8080, host: 38103, host_ip: "127.0.0.1"
  config.vm.network "forwarded_port", guest: 3306, host: 33306, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  config.vm.network "private_network", ip: "192.168.56.33"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  ###config.vm.network "public_network", :bridge => ['en0: Wi-Fi (AirPort)', 'en0: Wi-Fi (Wireless)', 'virbr0', 'eth0'], ip: "192.168.3.217", netmask: "255.255.254.0"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  ###config.vm.synced_folder "salt/roots/", "/srv/salt/", SharedFoldersEnableSymlinksCreate: false
  ###config.vm.synced_folder "salt/pillar/", "/srv/pillar/", SharedFoldersEnableSymlinksCreate: false
  config.vm.synced_folder "/private/var/www", "/var/www", owner: "www-data", group: "www-data", SharedFoldersEnableSymlinksCreate: false
  ###config.vm.synced_folder "/private/var/www", "/vagrant_data_www", SharedFoldersEnableSymlinksCreate: false
  ########config.vm.synced_folder "/Users/YOU-ACCOUNT/Downloads", "/vagrant_data_downloads", SharedFoldersEnableSymlinksCreate: false
  config.vm.synced_folder "~/Downloads", "/vagrant_data_downloads", SharedFoldersEnableSymlinksCreate: false

  config.vm.provision "shell", inline: "echo now is $(date).; echo current path is $(pwd)"
  config.vm.provision "shell", inline: <<-SHELL
    #echo "ubuntu:ubuntu" | sudo chpasswd
    whoami
    #apt-get update
  SHELL
  config.vm.provision "shell", path: "bootstrap.sh"

  #config.vm.provision "docker" do |d|
  #  #d.pull_images "memcached"
  #  d.run "memcached", image: "memcached"
  #end

###  config.vm.provision :salt do |salt|
###    salt.minion_config = "salt/minion"
###    salt.bootstrap_script = "bootstrap-salt.sh"
###    ###salt.install_master = false
###    ###salt.no_minion = false
###    salt.run_highstate = true
###    salt.colorize = true
###    salt.log_level = "debug" # default is info
###    salt.verbose = true
###  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  
  config.vm.provider "virtualbox" do |vb|
    vb.name = "vg-ubuntu2004"
    # Display the VirtualBox GUI when booting the machine
    vb.gui = false
    vb.cpus = 4
    # Customize the amount of memory on the VM:
    vb.memory = "4096"
    ###vb.customize ["modifyvm", :id, "--memory", "2048"]
  end
  
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL

  config.vm.provision "shell", inline: "echo very good!"

end
